<!-- source: 
  https://javascript.info/websocket
  https://stackoverflow.com/questions/58337243/canvas-touch-event-js
-->
<!doctype html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Camera Robot</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #181818;
            color: #EFEFEF;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 12px;
        }

        .column {
  
            flex: 1;
  padding: 16px;
        }

        /* Clear floats after the columns */
        .row {
            display: flex;
            /* Make the container element behave like a table */
            width: 100%;
        }

        .button-right {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            height: 50px;
            bottom: 90px!important;
            position: absolute;
            right: 10px;
        }
        .button-left {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            height: 50px;
            bottom: 90px!important;
            position: absolute;
            left: 10px;
        }
    </style>
</head>

<body>

    <div class="row">
        <div class="column">
            <label for="led">LED</label>

            <input id="led" type="checkbox" class="led-action">
            <label class="slider" for="led"></label>

        </div>
        <div class="column">

            <img id="stream" src="">

        </div>
        <div class="column" style="display:flex!important">
            <button class="button-left"><</button>
            <button class="button-right">></button>
        </div>
    </div>


    <div>
        <p>Output: <span id="output"></span></p>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function (event) {
            var baseHost = "http://xiaonanotank.local";// document.location.origin;

            const hide = el => {
                el.classList.add('hidden');
            };
            const show = el => {
                el.classList.remove('hidden');
            };

            const disable = el => {
                el.classList.add('disabled');
                el.disabled = true;
            };

            const enable = el => {
                el.classList.remove('disabled');
                el.disabled = false;
            };

            const updateValue = (el, value, updateRemote) => {
                updateRemote = updateRemote == null ? true : updateRemote;
                let initialValue;
                if (el.type === 'checkbox') {
                    initialValue = el.checked;
                    value = !!value;
                    el.checked = value;
                } else {
                    initialValue = el.value;
                    el.value = value;
                };

                if (updateRemote && initialValue !== value) {
                    updateConfig(el);
                } else if (!updateRemote) {
                    if (el.id === "aec") {
                        value ? hide(exposure) : show(exposure);
                    } else if (el.id === "agc") {
                        if (value) {
                            show(gainCeiling);
                            hide(agcGain);
                        } else {
                            hide(gainCeiling);
                            show(agcGain);
                        }
                    } else if (el.id === "awb_gain") {
                        value ? show(wb) : hide(wb);
                    }
                }
            };

            function updateLed(el) {
                let value = el.checked ? 1 : 0;
                const query = `${baseHost}/gpio?pin=4&val=${value}`;
                fetch(query)
                    .then(response => {
                        console.log(`request to ${query} finished, status: ${response.status}`);
                    });
            }

            function updateConfig(el) {
                let value;
                switch (el.type) {
                    case 'checkbox':
                        value = el.checked ? 1 : 0;
                        break;
                    case 'range':
                    case 'select-one':
                        value = el.value;
                        break;
                    case 'button':
                    case 'submit':
                        value = '1';
                        break;
                    default:
                        return;
                }

                const query = `${baseHost}/control?var=${el.id}&val=${value}`;

                fetch(query)
                    .then(response => {
                        console.log(`request to ${query} finished, status: ${response.status}`);
                    });
            }

            // read initial values
            fetch(`${baseHost}/status`)
                .then(function (response) {
                    return response.json();
                })
                .then(function (state) {
                    document
                        .querySelectorAll('.default-action')
                        .forEach(el => {
                            updateValue(el, state[el.id], false);
                        });
                });

            const view = document.getElementById('stream');
            //const viewContainer = document.getElementById('-contstreamainer');
            //const stillButton = document.getElementById('get-still');
            //const streamButton = document.getElementById('toggle-stream');

            const stopStream = () => {
                window.stop();
                //streamButton.innerHTML = 'Start Stream';
            };

            const startStream = () => {
                view.src = `${baseHost}:81/stream`;
                //show(viewContainer);
                //streamButton.innerHTML = 'Stop Stream';
            };

            // Attach actions to buttons
            /* stillButton.onclick = () => {
                 stopStream();
                 view.src = `${baseHost}/snap?${Date.now()}`;
                 show(viewContainer);
             };*/

            /*streamButton.onclick = () => {
                const streamEnabled = streamButton.innerHTML === 'Stop Stream';
                if (streamEnabled) {
                    stopStream();
                } else {
                    startStream();
                }
            };*/

            document
                .querySelectorAll('.led-action')
                .forEach(el => {
                    el.onchange = () => updateLed(el);
                });

            // Attach default on change action
            document
                .querySelectorAll('.default-action')
                .forEach(el => {
                    el.onchange = () => updateConfig(el);
                });

            // Custom actions
            // Gain
            /* const agc = document.getElementById('agc');
             const agcGain = document.getElementById('agc_gain-group');
             const gainCeiling = document.getElementById('gainceiling-group');
             agc.onchange = () => {
                 updateConfig(agc);
                 if (agc.checked) {
                     show(gainCeiling);
                     hide(agcGain);
                 } else {
                     hide(gainCeiling);
                     show(agcGain);
                 }
             };
 
             // Exposure
             const aec = document.getElementById('aec');
             const exposure = document.getElementById('aec_value-group');
             aec.onchange = () => {
                 updateConfig(aec);
                 aec.checked ? hide(exposure) : show(exposure);
             };
 
             // AWB
             const awb = document.getElementById('awb_gain');
             const wb = document.getElementById('wb_mode-group');
             awb.onchange = () => {
                 updateConfig(awb);
                 awb.checked ? show(wb) : hide(wb);
             };
 
             // framesize
             const framesize = document.getElementById('framesize');
 
             framesize.onchange = () => {
                 updateConfig(framesize);
             };*/

            // Touch Remote
            let ws = undefined;
            let isSending = false;
            let hasPendingMsg = false;
            let mouseDowned = false;
            let la = 0, lb = 0, ra = 0, rb = 0;

            /*let cv = document.getElementById('touchcanvas');
            let ctx = cv.getContext('2d');
            let ctop = cv.offsetTop;
            let cleft = cv.offsetLeft;

            var img = new Image();
            img.onload = function () {
                clearCanvas();
            }
            img.src = "arrows.svg";*/

            function clearCanvas() {
                /*ctx.fillStyle = '#fff';
                ctx.rect(0, 0, 255, 255);
                ctx.fill();
                ctx.drawImage(img, 0, 0);*/
            }

            function sendMessage(outgoingMessage) {
                if ((!ws) || (ws.readyState === ws.CLOSED)) { ws = nws(); }
                if (!isSending) {
                    output.innerHTML = outgoingMessage;
                    isSending = true;
                    ws.send(outgoingMessage);
                } else {
                    hasPendingMsg = true;
                    output.innerHTML = "pending";
                }
            }
            function sendMotor() {
                sendMessage('MOTOR:' + la.substr(-2) + ':' + lb.substr(-2) + ':' + ra.substr(-2) + ':' + rb.substr(-2));
            }

            function updateMotor(x, y) {
                la = 0, lb = 0, ra = 0, rb = 0;
                if (y < 112) { // forward
                    if (x > 144) {
                        lb = (255 - y);
                        rb = lb - (x - 128);
                    } else if (x < 112) {
                        rb = (255 - y);
                        lb = rb - (128 - x);
                    } else {
                        lb = (255 - y);
                        rb = lb;
                    }
                } else if (y > 144) { // backward
                    if (x > 144) {
                        la = y;
                        ra = la - (x - 128);
                    } else if (x < 112) {
                        ra = y;
                        la = ra - (128 - x);
                    } else {
                        la = y;
                        ra = la;
                    }
                } else {
                    if (x > 144) {
                        lb = x;
                        ra = lb;
                    } else if (x < 112) {
                        rb = (255 - x);
                        la = rb;
                    }
                }
                la = '0' + la.toString(16);
                lb = '0' + lb.toString(16);
                ra = '0' + ra.toString(16);
                rb = '0' + rb.toString(16);
                sendMotor();

                /*ctx.beginPath();
                ctx.fillStyle = 'rgba(255,48,52,0.5)';
                ctx.arc(x, y, 10, 0, Math.PI * 2, true);
                ctx.fill();
                ctx.closePath();*/
            }

            function move(e) {
                updateMotor(e.clientX - cleft, e.clientY - ctop);
            }

            function touch(e) {
                e.preventDefault();
                let x, y, u = e.touches[0];
                if (u) {
                    updateMotor(u.clientX - cleft, u.clientY - ctop);
                } else {
                    updateMotor(128, 128);
                }
            }

            function nws() {
                let ws = new WebSocket('ws://' + location.hostname + '/ws', ['arduino']);
                ws.onmessage = function (e) {
                    isSending = false;
                    if (hasPendingMsg) {
                        hasPendingMsg = false;
                        sendMotor();
                    }
                };
                return ws;
            }

            document.ontouchmove = function (e) {
                e.preventDefault();
            };

            /* cv.ontouchstart = touch;
             cv.ontouchmove = touch;
             cv.ontouchend = function (e) {
                 clearCanvas();
                 touch(e);
             };
             cv.onmousedown = function (e) {
                 mouseDowned = true;
                 move(e);
             };
             cv.onmousemove = function (e) {
                 if (mouseDowned) {
                     move(e);
                 }
             };
             cv.onmouseup = function (e) {
                 mouseDowned = false;
                 updateMotor(128, 128);
                 clearCanvas();
             };*/

            ws = nws();

            clearCanvas();

            startStream();
        });
    </script>
</body>

</html>