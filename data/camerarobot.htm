<!-- source: 
  https://javascript.info/websocket
  https://stackoverflow.com/questions/58337243/canvas-touch-event-js
-->
<!doctype html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Camera Robot</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #181818;
            color: #EFEFEF;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 12px;
        }

        .button-right {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            height: 50px;
            right: 10px;

        }

        .button-right:active {
            background-color: coral;
        }



        .right-span {
            display: inline-block;
            transform: rotate(-90deg);
        }


        .button-left {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            height: 50px;
            right: 100px;
        }

        .button-left:active {
            background-color: coral;
        }

        .left-span {
            display: inline-block;
            transform: rotate(-270deg);
        }

        .button-fwd {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            height: 50px;
        }

        .button-fwd:active {
            background-color: coral;
        }

        .fwd-span {
            display: inline-block;
            transform: rotate(-180deg);
        }

        .button-bwd {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            height: 50px;
        }

        .button-bwd:active {
            background-color: coral;
        }

        .button {
            background-color: #4CAF50;
            border: none;
            color: white;

            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            height: 50px;
            width: 70px;
        }

        #camUp:active {
            background-color: coral;
        }

        #camDown:active {
            background-color: coral;
        }

        #camLeft:active {
            background-color: coral;
        }

        #camRight:active {
            background-color: coral;
        }

        .led-on {
            background-color: royalblue !important;
        }

        .led-off {
            background-color: orange !important;
        }

        td {
            vertical-align: bottom;
            text-align: center;
        }
    </style>
</head>

<body>
    <input type="hidden" id="ledValue" value="0" />
    <table>
<label id="output"></label>
        <tr>
            <td style="width: 20%;">
                <button class="button led-off" id="led">LED</button>
                <button class="button .allwheeldrive">AWD</button>
                <button class="button .rearwheeldrive">RWD</button>
                <button class="button .frontwheeldrive">FWD</button>
                <hr>
                <button id="carF" class="button-fwd fwd-span"><span>V</span></button>
                <button id="carB" class="button-bwd "><span>V</span></button>
            </td>
            <td style="width: 50%;">
                <img id="stream" src="">
            </td>
            <td style="width: 20%;">
                <button id="carL" class="button-left left-span"><span>V</span>
                </button>
                <button id="carR" class="button-right right-span"><span>V</span></button>
            </td>
        </tr>


        <tr>
            <td style="width: 20%;"></td>
            <td style="width: 50%;">
                <button id="camUp" class="button fwd-span"><span>V</span></button>
                <button id="camDown" class="button"><span>V</span></button>
                <button id="camLeft" class="button left-span"><span>V</span></button>
                <button id="camRight" class="button right-span"><span>V</span></button>
            </td>
            <td style="width: 20%;"></td>
        </tr>

    </table>

    <script>
        document.addEventListener('DOMContentLoaded', function (event) {
            var baseHost = "http://xiaonanotank.local";// document.location.origin;

            const hide = el => {
                el.classList.add('hidden');
            };
            const show = el => {
                el.classList.remove('hidden');
            };

            const disable = el => {
                el.classList.add('disabled');
                el.disabled = true;
            };

            const enable = el => {
                el.classList.remove('disabled');
                el.disabled = false;
            };

            const updateValue = (el, value, updateRemote) => {
                updateRemote = updateRemote == null ? true : updateRemote;
                let initialValue;
                if (el.type === 'checkbox') {
                    initialValue = el.checked;
                    value = !!value;
                    el.checked = value;
                } else {
                    initialValue = el.value;
                    el.value = value;
                };

                if (updateRemote && initialValue !== value) {
                    updateConfig(el);
                } else if (!updateRemote) {
                    if (el.id === "aec") {
                        value ? hide(exposure) : show(exposure);
                    } else if (el.id === "agc") {
                        if (value) {
                            show(gainCeiling);
                            hide(agcGain);
                        } else {
                            hide(gainCeiling);
                            show(agcGain);
                        }
                    } else if (el.id === "awb_gain") {
                        value ? show(wb) : hide(wb);
                    }
                }
            };

            function updateLed(el) {
                let value = document.querySelector("#ledValue").value;
                var element = document.querySelector("#led");
                console.log(value)
                if (value == 1) {
                    document.querySelector("#ledValue").value = 0;
                    element.classList.remove('led-on');
                    element.classList.add('led-off');
                    value = 0;
                }
                else {
                    document.querySelector("#ledValue").value = 1;
                    element.classList.remove('led-off');
                    element.classList.add('led-on');
                    value = 1;
                }

                const query = `${baseHost}/gpio?pin=4&val=${value}`;
                fetch(query)
                    .then(response => {
                        console.log(`request to ${query} finished, status: ${response.status}`);
                    });
            }

            function updateConfig(el) {
                let value;
                switch (el.type) {
                    case 'checkbox':
                        value = el.checked ? 1 : 0;
                        break;
                    case 'range':
                    case 'select-one':
                        value = el.value;
                        break;
                    case 'button':
                    case 'submit':
                        value = '1';
                        break;
                    default:
                        return;
                }

                const query = `${baseHost}/control?var=${el.id}&val=${value}`;

                fetch(query)
                    .then(response => {
                        console.log(`request to ${query} finished, status: ${response.status}`);
                    });
            }

            // read initial values
            fetch(`${baseHost}/status`)
                .then(function (response) {
                    return response.json();
                })
                .then(function (state) {
                    document
                        .querySelectorAll('.default-action')
                        .forEach(el => {
                            updateValue(el, state[el.id], false);
                        });
                });

            const view = document.getElementById('stream');

            const stopStream = () => {
                window.stop();
                //streamButton.innerHTML = 'Start Stream';
            };

            const startStream = () => {
                view.src = `${baseHost}:81/stream`;
                //show(viewContainer);
                //streamButton.innerHTML = 'Stop Stream';
            };



            document.querySelector('#led').onclick = () => updateLed();


            document.querySelector('#camUp').onclick = () => changeCamPosition("UP");
            document.querySelector('#camDown').onclick = () => changeCamPosition("DOWN");
            document.querySelector('#camLeft').onclick = () => changeCamPosition("LEFT");
            document.querySelector('#camRight').onclick = () => changeCamPosition("RIGHT");


            document.querySelector('#carF').onclick = () => moveCarFB("F");
            document.querySelector('#carB').onclick = () => moveCarFB("B");
            document.querySelector('#carL').onclick = () => moveCarRL("L");
            document.querySelector('#carR').onclick = () => moveCarRL("R");



            document
                .querySelectorAll('.default-action')
                .forEach(el => {
                    el.onchange = () => updateConfig(el);
                });


            // Touch Remote
            let ws = undefined;
            let isSending = false;
            let hasPendingMsg = false;
            let mouseDowned = false;
            let la = 0, lb = 0, ra = 0, rb = 0;


            function changeCamPosition(direction) {
                sendMessage('CAMPOS:' + direction);
            }

            function moveCarFB(direction) {
                sendMessage('CARMOVE' + direction);
                console.log(direction);
            }

            function moveCarRL(direction) {
                sendMessage('CARDIR' + direction);
            }





            function sendMessage(outgoingMessage) {
                if ((!ws) || (ws.readyState === ws.CLOSED)) { ws = nws(); }
                if (!isSending) {
                    output.innerHTML = outgoingMessage;
                    isSending = true;
                    ws.send(outgoingMessage);
                } else {
                    hasPendingMsg = true;
                    output.innerHTML = "pending";
                }
            }
            function sendMotor() {
                sendMessage('MOTOR:' + la.substr(-2) + ':' + lb.substr(-2) + ':' + ra.substr(-2) + ':' + rb.substr(-2));
            }

            function updateMotor(x, y) {
                la = 0, lb = 0, ra = 0, rb = 0;
                if (y < 112) { // forward
                    if (x > 144) {
                        lb = (255 - y);
                        rb = lb - (x - 128);
                    } else if (x < 112) {
                        rb = (255 - y);
                        lb = rb - (128 - x);
                    } else {
                        lb = (255 - y);
                        rb = lb;
                    }
                } else if (y > 144) { // backward
                    if (x > 144) {
                        la = y;
                        ra = la - (x - 128);
                    } else if (x < 112) {
                        ra = y;
                        la = ra - (128 - x);
                    } else {
                        la = y;
                        ra = la;
                    }
                } else {
                    if (x > 144) {
                        lb = x;
                        ra = lb;
                    } else if (x < 112) {
                        rb = (255 - x);
                        la = rb;
                    }
                }
                la = '0' + la.toString(16);
                lb = '0' + lb.toString(16);
                ra = '0' + ra.toString(16);
                rb = '0' + rb.toString(16);
                sendMotor();
            }

            function move(e) {
                updateMotor(e.clientX - cleft, e.clientY - ctop);
            }

            function touch(e) {
                e.preventDefault();
                let x, y, u = e.touches[0];
                if (u) {
                    updateMotor(u.clientX - cleft, u.clientY - ctop);
                } else {
                    updateMotor(128, 128);
                }
            }

            function nws() {
                let ws = new WebSocket('ws://xiaonanotank.local/ws', ['arduino']);
                ws.onmessage = function (e) {
                    isSending = false;
                    if (hasPendingMsg) {
                        hasPendingMsg = false;
                        sendMotor();
                    }
                };
                return ws;
            }

            document.ontouchmove = function (e) {
                e.preventDefault();
            };
            ws = nws();
            startStream();
        });
    </script>
</body>

</html>